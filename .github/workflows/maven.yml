name: Automation Exercise Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  selenium-run:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Adjust as necessary

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 and Maven
      - name: Set up JDK 17 and Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          sudo apt-get install -y maven
          java -version
          export DISPLAY=:1
          export JAVA_TOOL_OPTIONS='-Djava.awt.headless=true'
          mvn -v

      # Step 3: Install necessary browser dependencies for Selenium
      - name: Install Browser Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev build-essential xvfb
          sudo apt-get install -y libcurl3-gnutls libnspr4 libnss3 xdg-utils fonts-liberation libasound2-dev
          sudo apt-get install -y libdbus-1-3 libx11-xcb1 libxkbcommon0
          
          # Install Google Chrome
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
          sudo apt-get install -y google-chrome-stable
          
          # Install Fluxbox and Xvfb for headless operation
          sudo apt-get -y install fluxbox
          Xvfb :99 &

      # Step 4: Set up the environment for the tests to run
      - name: Set up Virtual Display and Checkout
        run: |
          # Set up X virtual framebuffer
          Xvfb :99 -screen 0 1280x1024x24 &

          # Checkout the repository
          git config --global advice.detachedHead false
          git checkout ${{ github.sha }}

      # Step 5: Build and run tests using Maven
      - name: Run Maven Build and Tests
        run: |
          mvn clean 
          mvn test

#      # Step 6: After script to handle the results and report generation
#      - name: Handle Test Reports and Commit Results
#        run: |
#          # List all files in the target/chaintest directory
#          echo "Listing all files in target/chaintest"
#          ls -la target/chaintest
#
#          # Copy the index.html file to the project folder before commit
#          cp target/chaintest/Index.html Index.html
#
#          # Set git config for commit
#          git config --global user.name "shadyahmed9719"
#          git config --global user.email "shadyahmed9719@gmail.com"
#
#          # Add the HTML report and commit
#          git add Index.html
#          git commit -m "Update Selenium test report"
#
#          # Pull with rebase and push changes to the master branch
#          git config pull.rebase true
#          git pull --rebase=merges origin master
#
#          # Reconfigure remote URL to push to the correct repository
#          git remote remove origin
#          git remote add origin https://shadyahmed9719:${{ secrets.GITLAB_TOKEN }}@gitlab.com/wahoopredict-misc/automated-testing.git
#
#          git push origin master
#
#      # Step 7: Publish the results to the public directory
#      - name: Publish Test Results to Public Folder
#        run: |
#          mkdir -p public
#          cp -r * public/
#
#    # Artifacts configuration
#    outputs:
#      junit-reports: target/surefire-reports/junitreports/*.xml
#      test-results: target/screenshots/
#      allure-reports: target/allure-results/
#
#    # Retaining artifacts for 7 days
#    artifacts:
#      paths:
#        - target/
#        - target/screenshots/
#        - target/surefire-reports/
#        - target/allure-results/
#      retention-days: 7
